<?xml version="1.0" encoding="UTF-8"?>
<chapter id="protocol" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Jolokia Protocol</title>
    <para>
      Jolokia uses a JSON-over-HTTP protocol which is described in
      this chapter. The communication is based on a request-response
      paradigm, where each requests results in a single response.
    </para>
    <sidebar>
      <title>GET URLs are chatty</title>
      Keep in mind
      that many web servers log the requested path of every request, including
      parameters passed to a GET request, so sending messages over GET
      often bloats server logs.
    </sidebar>
    <para>
      Jolokia requests can be sent in two ways: Either as a HTTP GET
      request, in which case the request parameters are encoded
      completely in the URL. Or as a POST request where the request is
      put into a JSON payload in the HTTP request's body. GET based
      requests are mostly suitable for simple use cases and for
      testing the agent via a browser. The focus here is on
      simplicity.  POST based requests uses a JSON representation of
      the request within the HTTP body. They are more appropriate for
      complex requests and provide some additional features (e.g. bulk
      requests are only possible with POST).
    </para>
    <para>
      The response returned by the agent uses always JSON for its data
      representation. It has the same format regardless whether GET or
      POST requests are used.
    </para>
    <para>
      The rest of this chapter is divided into two parts: First, the
      general structure of requests and responses are explained after
      which the representation of Jolokia supported operations defined.
    </para>
    <note>
      Unfortunately the term <emphasis>operation</emphasis> is
      used in different contexts which should be
      distinguished from one another. <emphasis>Jolokia operations</emphasis> denote
      the various kind of Jolokia requests, whereas <emphasis>JMX
      operations</emphasis> are methods which can be invoked on an JMX
      MBean. Wherever the context requires it, this documents uses
      <emphasis>Jolokia</emphasis> or <emphasis>JMX</emphasis> as
      prefix.  
    </note>
    <section id="request-response">
      <title>Requests and Responses</title>
      <para>
        Jolokia knows about two different styles for handling
        requests, which are distinguished by the HTTP method used, GET
        or POST. Regardless what method is used, the agent doesn't
        keep any state on the server side (except of course that
        MBeans are mostly obviously stateful). So in this aspect, the
        communication can be considered
       <ulink url="http://en.wikipedia.org/wiki/Representational_State_Transfer">REST</ulink>
        like.
        <footnote id="rest-comment">
          <para>This document will avoid the term REST as much as
          possible in order to avoid provocating any dogmatic
          resentments.</para> 
        </footnote>.
      </para>
      <section id="get-request">
        <title>GET requests</title>
        <para>
          The simplest way to access the Jolokia is by sending
          HTTP GET requests. These requests encode all its parameters
          within the access URL. Typically, Jolokia uses the pathinfo
          part of an URL to extract the parameters. Within the
          path-info, each part is separated by a slash
          (<literal>/</literal>).  In general, the request URL looks
          like
          <synopsis><![CDATA[<base-url>/<type>/<arg1>/<arg2>/..../]]></synopsis>
          The <literal>&lt;base-url&gt;</literal> specifies the URL
          under which the agent is accessible. It
          typically looks like
          <uri>http://localhost:8080/jolokia</uri>, but depends
          obviously on your deployment setup. Normally, the last part
          of this URL is the name of the deployed agent, which by
          default is based on the agent's filename
          (e.g. <filename>jolokia.war</filename>).
          <literal>&lt;type&gt;</literal> specifies one of the
          supported Jolokia operations (described in the next
          section), followed by one or more operation-specific
          parameters separated by slashes.
        </para>
        <para>
          For example, the following URL executes a
          <constant>read</constant> Jolokia operation on the MBean
          <literal>java.lang:type=Memory</literal> for reading the
          attribute <literal>HeapMemoryUsage</literal> (see <xref
          linkend="read"/>). It is assumed, that the agent is
          reachable under the base URL
          <uri>http://localhost:8080/jolokia</uri>: 
          <informalexample>
            <literallayout class="monospaced">http://localhost:8080/jolokia/read/java.lang:type=Memory/HeapMemoryUsage</literallayout>
          </informalexample>
        </para>
        <sidebar>
          <title>
            Why escaping ?
          </title>
            You might wonder why simple URI encoding isn't enough for
            escaping slashes. The reason is rather simple:
            JBoss/Tomcat has a strange behaviour when returning an HTTP
            response <literal>HTTP/1.x 400 Invalid URI:
            noSlash</literal> for any URL which contains an escaped
            slash in the path info (i.e. <literal>%2F</literal>). The
            reason behind this behaviour is security related, slashes
            get decoded on the agent side before the agent-servlet
            gets the request. Other appservers might exhibit a similar
            behaviour.
        </sidebar>
        <para>
          If one of the request parts contain a slash
          (<literal>/</literal>) (e.g. as part of you bean's name) it
          needs to be escaped. A single slash (<literal>/</literal>)
          is escaped by the combination <literal>/-/</literal>, two
          subsequent slashes (<literal>//</literal>) are to be escaped
          with <literal>/--/</literal> and so on. For example, to
          request the atrribute <literal>State</literal> on the MBean
          named <literal>jboss.jmx:alias=jmx/rmi/RMIAdaptor</literal>,
          an access URL like this has to be constructed:
        </para>        
        <informalexample>
          <literallayout class="monospaced">.../read/jboss.jmx:alias=jmx/-/rmi/-/RMIAdaptor/State</literallayout>
        </informalexample>
        <para>
          Client libraries like <ulink
          url="http://search.cpan.org/~roland/jmx4perl">JMX::Jmx4Perl</ulink>
          do this sort of escaping transparently. If the part
          (e.g. MBean's name) <emphasis>starts</emphasis> with a slash
          you need to use a <literal>^</literal> instead of a minus,
          so the j4p agent can combine parts properly. The same is
          true, if the part <emphasis>ends</emphasis> with a slash,
          than the corresponding minus must be replaced with a
          <literal>+</literal>. For example to encode a MBean name
          like <literal>test:strangeName=/bla//</literal>, this should
          be encoded like
          <informalexample>
            <literallayout class="monospaced">.../test:strangeName=/-/bla/-+/attribute</literallayout>
          </informalexample>
          The corresponding perl code
          for creating escaping a single part looks like
        </para> 
        <programlisting language="perl"><![CDATA[
$input =~ s|(/+)|"/" . ('-' x length($1)) . "/"|eg;
$input =~ s|^/-|/^|; # The first slash needs to be escaped (first)
$input =~ s|-/$|+/|; # as well as last slash. They need a special escape.
]]></programlisting>
       <para>
          All of this said, this sort of strange escaping can be
          avoided alltogether if a slightly different variant for a
          request is used (which doesn't look that REST-stylish,
          though). Instead of providing the information as path-info
          a query parameter <literal>p</literal> can be used
          instead. This should be URL encoded, though. For the
          example above, the alternative is
          <informalexample>
            <literallayout class="monospaced">http:localhost:8080/jolokia?p=/read/test:strangeName=%2Fbla%2F%2F/attribute</literallayout>
          </informalexample>
        </para>
        <para>
          Luckily, the POST request variant doesn't need this slash
          mangling. It is described in the next section.
        </para>
      </section>

      <section id="post-request">
        <title>POST requests</title>
        <para>
          POST requests are the most powerful way to communicate
          with the Jolokia agent. There are fewer escaping issues and it
          allows for features which are not available with GET
          requests. POST requests uses a fixed URL and put their payload
          within the HTTP request's body. This payload is represented
          in <ulink url="http://www.json.org">JSON</ulink>, a
          data serialization format originating from JavaScript
          world.
        </para>
        <para>
          The JSON format for a single request is a JSON object, which
          is essentially a map with keys (or
          <emphasis>attributes</emphasis>) and values. All requests
          have a common mandatory attribute,
          <constant>type</constant>, which specifies the kind of JMX
          operation to perform. The other attributes are either
          operation specific as described in <xref
          linkend="jolokia-operations"/> or are <emphasis>processing
          parameters</emphasis> which influence the overall behaviour
          and can be mixed in to any request. See <xref
          linkend="processing-parameters"/> for details.
        </para>
        <para>
          A sample read request in JSON format looks like the
          following example. It has a <constant>type</constant>
          "read"
          (case doesn't matter) and the three attributes
          <constant>mbean</constant>, <constant>attribute</constant>
          and <constant>path</constant> which are specific to a read
          request. 
        </para>
        <programlisting><![CDATA[
  {
    "type" : "read",
    "mbean" : "java.lang:type=Memory",
    "attribute" : "HeapMemoryUsage",
    "path" : "used",
  }]]></programlisting>
        <para>
          Each request JSON object results in a single JSON response
          object contained in the HTTP answer's body. A <emphasis>bulk
          request</emphasis> contains multiple Jolokia requests within
          a single HTTP request. This is done by putting individual
          Jolokia requests into a JSON array:
        </para>
        <programlisting><![CDATA[
 [
  {
    "type" : "read",
    "attribute" : "HeapMemoryUsage",
    "mbean" : "java.lang:type=Memory",
    "path" : "used",
  },
  { 
    "type" : "search"
    "mbean" : "*:type=Memory,*",
  }
 ]]]></programlisting>
        <para>
          This request will result in a JSON array containing multiple
          JSON responses within the HTTP response. They are returned
          in same order as the requests in the initial bulk request.
        </para>
      </section>
      
      <section id="responses">
        <title>Responses</title>
        <para>
          Responses are always encoded in JSON, regardless whether the
          requst was a GET or POST request.  In general, two kinds of
          responses can be classified: In the normal case, a HTTP
          Response with response code 200 is returned, containing the
          result of the operation as a JSON payload. In case of an
          error, a 4xx or 5xx code will be returned and the JSON
          payload contains details about the error
          occured (e.g. 404 means "not found"). (See
          <ulink url="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">this page</ulink>
          for more information about HTTP error codes..)
        </para>
        <para>
          In the non-error case a JSON response looks mostly the same
          for each request type except for the
          <constant>value</constant> attribute which is request type
          specific. 
        </para>
        <para>
          The format of a single Jolokia response is
        </para>
        <programlisting><![CDATA[
 {
   "value": .... ,
   "status" : 200,
   "timestamp" : 1244839118,
   "request": {
               "type": ...,
               ....
              },
   "history":[
               {"value": ... ,
                "timestamp" : 1244839045
               }, ....
             ]
 }]]></programlisting>
        <para>
          For successful requests, the <constant>status</constant> is
          always <literal>200</literal> (the HTTP success code). The
          <constant>timestamp</constant> contains the epoch
          time<footnote id="epoch-time">
          <para>
            Seconds since 1.1.1970
          </para>
          </footnote> when the
          request has been handled. The request leading to this
          response can be found under the attribute
          <constant>request</constant>. Finally and optionally, if
          history tracking is switched on (see <xref
          linkend="history"/>), an entry with key
          <constant>history</constant> contains a list of historical
          values along with their timestamps. History tracking is only
          available for certain type of requests
          (<constant>read</constant>, <constant>write</constant> and
          <constant>exec</constant>). The <constant>value</constant>
          is specific for the type of request, it can be a single
          scalar value or a monster JSON structure.
        </para>
        <para>
          If an error occurs, the <constant>status</constant> will be
          a number different from <literal>200</literal>. An error
          response looks like
        </para>
        <programlisting><![CDATA[
  {
    "status":400,
    "error_type":"java.lang.IllegalArgumentException",
    "error":"java.lang.IllegalArgumentException: Invalid request type 'java.lang:type=Memory'",
    "stacktrace":"java.lang.IllegalArgumentException: Invalid request type 'java.lang:type=Memory'\n
                  \tat org.cpan.jmx4perl.JmxRequest.extractType(Unknown Source)\n
                  \tat org.cpan.jmx4perl.JmxRequest.<init>(Unknown Source) ...."
  }]]></programlisting>
        <para>
            For status codes it is important to distinguish status
            codes as they appear in Jolokia JSON response objects
            and the HTTP status code of the (outer) HTTP
            response. There can be many Jolokia status codes, one for
            each Jolokia request contained in the single HTTP request. The
            HTTP status code merely reflect the status of agent itself
            (i.e. whether it could perform the operation at all), whereas the
            Jolokia response status reflects the result of the
            operation (e.g. whether the performed operation throws an
            exception). So it is not uncommon to have an HTTP status
            code of 200, but the contained JSON response(s) indicate
            some errors.
        </para>
        <para>
          I.e. the <constant>status</constant> has a code in the range
          <literal>400 .. 499</literal> or <literal>500 .. 599</literal>
          as it is specified for HTTP return codes. The
          <constant>error</constant> member contains an error
          description. This is typically the message of an exception
          occured on the agent side<footnote
          id="mbeanexception-wrapping">
          <para>
            If the server exception
            is a subtype of <classname>MBeanException</classname>, the wrapped
            exception's message is used.
          </para>
          </footnote>. Finally, <constant>error_type</constant> contains the Java class name
          of the exception occured.
          The <constant>stacktrace</constant> contains a Java stacktrace
          occured on the server side (if any stacktrace is available).
          </para>

        <para>
          For each type of operation, the format of the
          <constant>value</constant> entry is explained in
          <xref linkend="jolokia-operations"/>
        </para>
      </section>
      
      <section id="pathes">
        <title>Pathes</title>
        <para>
          Before we come to the Jolokia operation the general conecpt
          of <emphasis>inner pathes</emphasis> requires some
          explanation. 
        </para>
        <para>
          An <emphasis>inner path</emphasis> points to a certain
          substructure (plain value, array, hash) within a a complex
          JSON value. Think of it as something like "XPath lite". This
          is best explained by an example:
        </para>
        <para>
          The attribute <literal>HeapMemoryUsage</literal> of the MBean 
          <literal>java.lang:type=Memory</literal> can be
          requested with the URL 
          <literal>http://localhost:8080/j4p/read/java.lang:type=Memory/HeapMemoryUsage</literal>
          which returns a complex JSON structure like
          <programlisting language="json">
 {
   "committed" : 18292736,
   "used" : 15348352,
   "max" : 532742144,
   "init" : 0
 }</programlisting>
        </para>
        <para>
          In order to get to the value for used heap memory you should
          specify an inner path <literal>used</literal>, so that the
          request
          <literal>http://localhost:8080/j4p/read/java.lang:type=Memory/HeapMemoryUsage/used</literal>
          results in a response of <literal>15348352</literal>.  If
          the attribute contains arrays at some level, use a numeric
          index (0 based) as part of the inner path if you want to
          traverse into this array.
        </para>        
      </section>
    </section>
    
    <section id="jolokia-operations">
      <title>Jolokia operations</title>

      <xi:include href='protocol/read.xml'/>
      <xi:include href='protocol/write.xml'/>
      <xi:include href='protocol/exec.xml'/>
      <xi:include href='protocol/search.xml'/>
      <xi:include href='protocol/list.xml'/>
      <xi:include href='protocol/version.xml'/>

    </section>
        
    <section id="processing-parameters">
      <title>Processing parameters</title>
      <para>
        Jolokia operations can be influenced by so called
        <emphasis>processing parameters</emphasis>. These parameters
        are provided differently for POST and GET requests.
      </para>
      <para>
        For GET request, the processing parameter are given as normal
        query parameters:
        <synopsis><![CDATA[<GET request URL>?param1=value1&param2=value2&...]]></synopsis>
        For example the request
        <synopsis><![CDATA[http://localhost:8080/jolokia/list?maxObjects=100]]></synopsis>
        will limit the response to at max 100 values.
      </para>
      <para>
        POST request take the processing instructions within the
        JSON request below the key <constant>config</constant>:
      </para>
        <programlisting><![CDATA[
  {
    "type" : "list"
    "config" : { 
                 "maxObjects" : "100"
               } 
  }]]></programlisting>
      <para>
        The list of known processing parameters is:
      </para>
      <variablelist>
        <varlistentry>
          <term><literal>maxDepth</literal></term>
          <listitem>
            <para>
              Maximum depth of the tree traversal into a bean's
              properties. The maximum value as configured in the
              agent's configuration is a hard limit
              and cannot be exceeded by a query parameter.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>maxCollectionSize</literal></term>
          <listitem>
            <para>
              For collections (lists, maps) this is the maximum
              size. 
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>maxObjects</literal></term>
          <listitem>
            <para>
              Number of objects to visit in total. A hard limit
              can be configured in the agent's configuration. 
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>ignoreErrors</literal></term>
          <listitem>
            <para>
              If set to "true", a Jolokia operation will not return an
              error if an JMX operation fails, but includes the
              exception message as value. This is useful for e.g. the
              read operation when requesting multiple attributes'
              values. Default: false 
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    
    <section id="serialization">
      <title>Object serialization</title>
      <para>
        Jolokia has some object serialization facilities in order to
        convert complex Java data types to JSON and vice
        versa. Serialization works in both ways in requests and
        responses, but the capabilities differ.
      </para>
      <para>
        Complex data types returned from the agent can be serialized
        completely into a JSON value object. It can detect cycles in
        the object graph and provides a way to limit the depth of
        serialization. For certain types (like
        <classname>File</classname> or
        <classname>ObjectName</classname>) it uses simplifier to not
        expose internal and redundant information. 
      </para>
      <para>
        Object values used for values in 
        <emphasis>write</emphasis> operations and arguments in
        <emphasis>exec</emphasis>, type support is limited to a
        handful of data types.
      </para>
      <section id="serialization-response">
        <title>Response value serialization</title>
        <para>
          Jolokia can serialize any object into a JSON representation
          when generating the response. It uses some specific
          converters for certain well known data type with a generic
          bean converter as fallback.
        </para>
        <para>
          The following types are directly supported:
          <itemizedlist>
            <listitem>
              Arrays and <classname>java.util.List</classname>
              are converted to JSON arrays
            </listitem>
            <listitem>
              <classname>java.util.Map</classname> gets
              converted into a JSON object
            </listitem>
            <listitem>
              <classname>javax.management.openmbean.CompositeData</classname>
              is converted in a JSON object, with the keys taken from
              the <classname>CompositeData</classname>'s key set and
              the value are its values.
            </listitem>
            <listitem>
              <classname>javax.management.openmbean.TabularData</classname>
              is serialized into a JSON array, with the elements as
              maps (this entries are of type
              <classname>CompositeData</classname>). 
            </listitem>
            <listitem>
              <classname>java.lang.Class</classname> gets converted to
              a JSON object with keys <literal>name</literal> (the class
              name> and <literal>interfaces</literal> (the implemented
              interfaces, if any)
            </listitem>
            <listitem>
              <classname>java.io.File</classname> becomes a JSON
              object with keys <literal>name</literal>,
              <literal>modified</literal>, <literal>length</literal>,
              <literal>directory</literal>,
              <literal>canonicalPath</literal>,
              <literal>exists</literal> and <literal>lastModified</literal>
            </listitem>
            <listitem>
              <classname>javax.management.ObjectName</classname> is
              converted into a JSON object with the single key
              <literal>objectName</literal>. 
            </listitem>
            <listitem>
              <classname>java.net.URL</classname> becomes a JSON
              object with the key <literal>url</literal> containing
              the URL as String.
            </listitem>
            <listitem>
              <classname>java.util.Date</classname> is represented by
              its string form.
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Primitive and simple types (like String) are
          directly converted into its string presentation. All other
          objects of a complex type are serialized via reflection recursively.
        </para>
        <para>
          Serialization can be influence by certain processing
          parameters given with the request (see <xref
          linkend="processing-parameters"/>). I.e. the recursive
          process of JSON serialization can be stopped when the data
          set gets too large. Self and other circular references
          are detected, too. If this happen, special values indicate
          the truncation of the generated JSON object.
        </para>
        <variablelist>
          <varlistentry>
            <term><constant>[this]</constant></term>
            <listitem>
              <para>
                This label is used when a property contains a self reference 
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><constant>[Depth limit .... ]</constant></term>
            <listitem>
              <para>
                When a depth limit is used or the hard depth limit
                is exceeded, this label contains a string
                representation of the next object one level deeper.
                (see <xref linkend="processing-parameters"/>,
                parameter <literal>maxDepth</literal>)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><constant>[Reference .... ]</constant></term>
            <listitem>
              <para>
                If during the traversal an object is visited a second time, this label is
                used in order to break the cycle. 
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><constant>[Object limit exceeded]</constant></term>
            <listitem>
              <para>
                The total limit of object has been exceeded and hence
                the object are not deserialized further.  (see <xref
                linkend="processing-parameters"/>, parameters
                <literal>maxCollectionSize</literal> and
                <literal>maxObjects</literal>)
              </para>
            </listitem>
          </varlistentry>
        </variablelist>  
      </section>
      
      <section id="serialization-request">
        <title>Request parameter serialization</title>
        <para>
          The following types can used for request parameters in write
          and exec requests, both for POST and GET requests:
          <itemizedlist>
            <listitem>String</listitem>
            <listitem>Integer / int</listitem>
            <listitem>Long / long</listitem>
            <listitem>Byte / byte</listitem>
            <listitem>Shirt / short</listitem>
            <listitem>Float / float</listitem>
            <listitem>Double / double</listitem>
            <listitem>char</listitem>
            <listitem>Boolean / boolean</listitem>
          </itemizedlist>
        </para>
        <para>
          The serialized value is simply the string representation of
          those types. Arrays of the given types are supported,
          too. These are serialized as a comma separated list.
        </para>
        <note>
          The array support is somewhat limited since it makes a
          native split on commas. It does not yet take into account
          any quoting or escaping.
        </note>
        <para>
          A <constant>null</constant> value is serialized as
          <literal>[null]</literal>, an empty String as
          <literal>""</literal><footnote>
          <para>This is obviously not a
          perfect solution. We are working on it.</para></footnote>.
        </para>
        <para>
          Finally object of type
          <classname>org.json.simple.JSONObject</classname> and
          <classname>org.json.simple.JSONArray</classname> are
          serialized in it JSON representation and can be used for
          operations and attributes which take arguments of these
          types. 
        </para>
      </section>
    </section>

    <section id="history">
      <title>Tracking historical values</title>
      <para>
        The Jolokia agents are able to keep requested values in memory
        along with a timestamp. If history tracking is switched on,
        then the agent will put the list of historical values specific
        for this request into the response. History tracking is
        toggled by an MBean operation on a Jolokia-owned MBean (see
        <xref linkend="mbeans"/>). This has to be done individually on each
        attribute or JMX operation to be tracked.
      </para>
      <para>
        The MBean <literal>jolokia:type=Config</literal> provides the
        following two operations:
        <variablelist>
          <varlistentry>
            <term><emphasis role="bold">setHistoryEntriesForOperation</emphasis></term>
            <listitem>              
              <emphasis>(todo)</emphasis>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><emphasis role="bold">setHistoryEntriesForAttribute</emphasis></term>
            <listitem>              
              <emphasis>(todo)</emphasis>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
      <para>
        Optionally, a <constant>history</constant> entry might be
        present. This is the case, when <emphasis>history
        tracking</emphasis> is switched on. A certain JMX
        operation on an Jolokia specific MBean has to be executed
        to turn history tracking on. See <xref linkend="history"/>
        for details. If this is the case,
        <constant>history</constant> contains an array of json
        objects which have two attributes: <constant>value</constant>
        containing the historical value (which can be as complex
        as any other value) and <constant>timestamp</constant> indicating
        the time when this value was current (as measured by the server).
      </para>
    </section>

    <section id="versions">
      <title>Jolokia protocol versions</title>
      <para>
        The protocol definition is versioned. It contains of a major
        and minor version. Changes in the minor version are backward
        compatible to other protocol with the same major
        version. Major version changes incorporate possibly backwards
        incompatible changes. This document describes the Jolokia
        protocol version <emphasis role="bold">4.0</emphasis>
      </para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">4.0</emphasis> (17.10.2010)</term>
          <listitem>
            <para>This is the initial version for Jolokia. Versions below 4 are
            implemented by jmx4perl</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
</chapter>